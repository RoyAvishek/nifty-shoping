# Enhanced RSI Strategy V2 - Standalone Version

This branch contains a consolidated, single-script version of the Enhanced RSI Strategy V2 for easy sharing and verification.

## ‚ö†Ô∏è CRITICAL VALIDATION REQUIRED

**The strategy is producing extraordinary returns (28,530%) that require team verification:**
- Position size grows from ‚Çπ10,000 to ‚Çπ114,130,913 (11,413x growth)
- 100% win rate with 174 profitable trades
- No corona stocks (perfect risk management)

**Please manually verify the calculation logic and trade execution before proceeding.**

## üßÆ STRATEGY CALCULATION LOGIC

### **Core Algorithm:**
1. **Entry Condition**: RSI < 35 (oversold stocks)
2. **Exit Conditions**: 
   - **Profit Target**: 6.28% gain ‚Üí Sell & pay 24.96% tax
   - **Corona Threshold**: 22.5% loss ‚Üí Sell & quarantine stock
3. **Position Sizing**: Starts at ‚Çπ10,000, grows with each profit
4. **Compounding**: **CRITICAL** - Position size increases by full net profit from each trade

### **Key Compounding Formula:**
```python
# After each profitable trade:
gross_proceeds = quantity * sell_price
profit = gross_proceeds - total_invested
tax = profit * 0.2496  # 24.96% tax rate
net_proceeds = gross_proceeds - tax
net_profit = net_proceeds - total_invested

# CRITICAL: Position size grows by FULL net profit
current_position_size += net_profit  # This creates exponential growth
```

### **Position Sizing Logic:**
```python
# Initial trades: ‚Çπ10,000 - ‚Çπ15,000 range
# After growth phase: No upper limit (allows exponential scaling)
target_position = max(10000, current_position_size)
shares = int(target_position / price)  # Whole shares only
actual_investment = shares * price
```

### **RSI Calculation:**
```python
delta = prices.diff()
gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
rs = gain / loss
rsi = 100 - (100 / (1 + rs))
```

## ÔøΩ MANUAL VERIFICATION STEPS

### **Step 1: Verify Entry Logic**
1. Check RSI calculation for accuracy
2. Confirm entries only occur when RSI < 35
3. Verify stocks are sorted by lowest RSI first
4. Ensure no entries for quarantined stocks

### **Step 2: Verify Exit Logic**
1. **Profit Exits**: Confirm 6.28% threshold triggers sales
2. **Corona Exits**: Confirm 22.5% loss threshold triggers quarantine
3. **Tax Calculation**: Verify 24.96% applied only to profits
4. **Net Proceeds**: Check gross_proceeds - tax calculation

### **Step 3: Verify Position Size Growth**
```
Example Trade Verification:
- Buy: ‚Çπ10,000 position at ‚Çπ100/share = 100 shares
- Sell: ‚Çπ106.28/share (6.28% gain)
- Gross: 100 √ó ‚Çπ106.28 = ‚Çπ10,628
- Profit: ‚Çπ10,628 - ‚Çπ10,000 = ‚Çπ628
- Tax: ‚Çπ628 √ó 0.2496 = ‚Çπ156.76
- Net Proceeds: ‚Çπ10,628 - ‚Çπ156.76 = ‚Çπ10,471.24
- Net Profit: ‚Çπ10,471.24 - ‚Çπ10,000 = ‚Çπ471.24
- New Position Size: ‚Çπ10,000 + ‚Çπ471.24 = ‚Çπ10,471.24
```

### **Step 4: Verify Compounding Effect**
After 174 trades with average 6.28% profit each:
- Each trade increases position size by ~4.7% net
- Compounding: (1.047)^174 ‚âà 1,141x growth
- Position size: ‚Çπ10,000 √ó 1,141 ‚âà ‚Çπ11.4M ‚úì

## ÔøΩüöÄ Quick Start

### Prerequisites
```bash
pip install pandas numpy matplotlib
```

### Historical Data Structure
Ensure you have historical data in this format:
```
project_folder/
‚îú‚îÄ‚îÄ nifty-shoping-rsi/
‚îÇ   ‚îî‚îÄ‚îÄ nifty-shoping-rsi.py
‚îî‚îÄ‚îÄ historical_data/
    ‚îú‚îÄ‚îÄ RELIANCE_historical.csv
    ‚îú‚îÄ‚îÄ TCS_historical.csv
    ‚îú‚îÄ‚îÄ HDFC_historical.csv
    ‚îî‚îÄ‚îÄ ... (other Nifty 50 stocks)
```

### CSV Format Required
```csv
date,open,high,low,close,volume
2020-01-01,1500.00,1520.00,1480.00,1510.00,1000000
...
```

### Run the Backtest
```bash
cd nifty-shoping-rsi
python nifty-shoping-rsi.py
```

## üìä ACTUAL RESULTS (Latest Run)

```
üìä PERFORMANCE SUMMARY:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Initial Capital      : ‚Çπ400,000
Final Portfolio Value : ‚Çπ114,520,913
Total Return          : 28,530.2%
Active Positions      : 0
Available Cash        : ‚Çπ114,520,913
Final Position Size   : ‚Çπ114,130,913

üéØ TRADING STATISTICS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Total Trades          : 174
Profitable Trades     : 174
Corona Trades         : 0
Corona Stocks         : 0
Win Rate              : 100.0%
```

## üéØ Key Results Analysis

- **Total Return**: 28,530.2% (vs expected ~4,277%)
- **Win Rate**: 100% (174/174 trades profitable)
- **Corona Stocks**: 0 (perfect risk management)
- **Position Growth**: 11,413x (‚Çπ10K ‚Üí ‚Çπ114M)
- **Risk Management**: Zero losses, all exits at profit targets

## üìÅ Generated Output Files

After running, the script creates:
1. **`enhanced_rsi_results.txt`** - Complete performance summary
2. **`enhanced_rsi_monthly_reports.txt`** - Detailed month-by-month analysis

### Sample Monthly Report Format:
```
üìÖ 2020-07
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí∞ PORTFOLIO STATUS:
   ‚Ä¢ Start Value: ‚Çπ400,000
   ‚Ä¢ End Value: ‚Çπ404,019
   ‚Ä¢ Monthly Return: +1.00%
   ‚Ä¢ Available Cash: ‚Çπ330,553

üíº CAPITAL DEPLOYMENT:
   ‚Ä¢ Active Positions: ‚Çπ71,636 (7 stocks)
   ‚Ä¢ Total Deployed: ‚Çπ71,636 (17.7% of portfolio)
   ‚Ä¢ Position Size: ‚Çπ12,188

üîÑ TRADING ACTIVITY SUMMARY:
   ‚Ä¢ Total Trades: 15
   ‚Ä¢ New Entries: 11 | Averaging: 0 | Exits: 4 | Corona: 0

üìà NEW STOCK ENTRIES (DETAILED):
    1. DIVISLAB     | Entry: ‚Çπ2263.40 | Qty:    4 | Amount: ‚Çπ    9054 | Date: 2020-07-17 | RSI: 17.56 | NEW_ENTRY (RSI: 17.56 < 35)
    [... detailed trade entries ...]

üí∞ PROFIT BOOKINGS (DETAILED):
   Total Profit This Month: ‚Çπ2,916.35
    1. DIVISLAB     | Buy: ‚Çπ2263.40 | Sell: ‚Çπ2423.65 | Qty:    4 | Profit: ‚Çπ 641.00 ( +7.08%)
       Buy Date: 2020-07-17 | Sell Date: 2020-07-29 | Hold:  12 days | Tax: ‚Çπ159.99
       Invested: ‚Çπ    9054 | Gross: ‚Çπ    9695 | Net: ‚Çπ    9535 | PROFIT_TARGET (Return: 7.08% >= 6.28%)
```

## üîß TEAM VERIFICATION CHECKLIST

### **Code Review Tasks:**
- [ ] **Verify RSI calculation accuracy** (lines 53-60)
- [ ] **Check profit target logic** (6.28% threshold)
- [ ] **Validate tax calculation** (24.96% on profits only)
- [ ] **Confirm position size compounding** (full profit addition)
- [ ] **Review entry/exit conditions** (RSI < 35, profit >= 6.28%)

### **Data Validation Tasks:**
- [ ] **Sample trade verification** (manually calculate 5-10 trades)
- [ ] **Position size progression** (verify exponential growth)
- [ ] **Tax calculations** (confirm 24.96% applied correctly)
- [ ] **Share quantity calculations** (whole shares only)
- [ ] **Timeline verification** (trades occur on valid dates)

### **Result Validation Tasks:**
- [ ] **Cross-check monthly reports** with overall summary
- [ ] **Verify win rate calculation** (174/174 = 100%)
- [ ] **Confirm no corona trades** (no 22.5% losses)
- [ ] **Validate final portfolio value** calculation
- [ ] **Check position size growth** (‚Çπ10K ‚Üí ‚Çπ114M)

## üß™ Manual Calculation Example

**Trade #1 Verification:**
```
Date: 2020-07-17
Stock: DIVISLAB
Entry: ‚Çπ2263.40, RSI: 17.56
Position Size: ‚Çπ10,000
Shares: int(10000/2263.40) = 4 shares
Actual Investment: 4 √ó ‚Çπ2263.40 = ‚Çπ9,053.60

Exit Date: 2020-07-29
Exit Price: ‚Çπ2423.65
Return: (2423.65 - 2263.40) / 2263.40 = 7.08% ‚úì (> 6.28%)

Calculations:
- Gross Proceeds: 4 √ó ‚Çπ2423.65 = ‚Çπ9,694.60
- Profit: ‚Çπ9,694.60 - ‚Çπ9,053.60 = ‚Çπ641.00
- Tax: ‚Çπ641.00 √ó 0.2496 = ‚Çπ159.99
- Net Proceeds: ‚Çπ9,694.60 - ‚Çπ159.99 = ‚Çπ9,534.61
- Net Profit: ‚Çπ9,534.61 - ‚Çπ9,053.60 = ‚Çπ481.01
- New Position Size: ‚Çπ10,000 + ‚Çπ481.01 = ‚Çπ10,481.01
```

## üö® CRITICAL QUESTIONS FOR TEAM

1. **Is the compounding logic correct?** Should position size grow by full net profit?
2. **Are the returns realistic?** 28,530% seems extraordinarily high
3. **Is 100% win rate possible?** Zero losing trades seems unusual
4. **Position size constraints?** Should there be upper limits on position sizing?
5. **Tax calculation accuracy?** Is 24.96% rate correctly applied?

## üìã Troubleshooting

**Data Loading Issues:**
- Ensure CSV files have 'date,open,high,low,close,volume' columns (lowercase)
- Check file naming: `SYMBOL_historical.csv`
- Verify path: `../historical_data/` (one level up from script)

**Memory Issues:**
- Script processes 5+ years of data for 50+ stocks
- Ensure 4GB+ RAM available
- Close other applications during execution

## ü§ù TEAM COLLABORATION & VERIFICATION

### **Immediate Action Items:**
1. **Code Review** - Examine the compounding logic in `simulate_strategy()` method
2. **Manual Verification** - Calculate 5-10 sample trades manually
3. **Data Validation** - Verify historical data accuracy and completeness
4. **Logic Validation** - Confirm RSI calculations and entry/exit triggers
5. **Results Cross-Check** - Compare with any existing backtesting tools

### **Specific Code Sections to Review:**
```python
# Line 232-236: Position Size Compounding (CRITICAL)
net_profit = net_proceeds - holdings['total_invested']
current_position_size += net_profit  # Full profit compounds

# Line 63-78: Position Sizing Logic
if target_position_size <= self.max_position_size:
    target_position = max(self.min_position_size, min(self.max_position_size, target_position_size))
else:
    target_position = max(self.min_position_size, target_position_size)  # Unlimited growth

# Line 204-209: Exit Conditions
if current_return >= self.profit_target:  # 6.28%
    stocks_to_sell.append((stock, current_return, 'PROFIT'))
elif current_return <= -self.corona_threshold:  # -22.5%
    stocks_to_sell.append((stock, current_return, 'CORONA'))
```

### **Questions for Team Discussion:**
1. **Is unlimited position size growth realistic?** Should we cap at some level?
2. **Are we missing any transaction costs?** Brokerage, STT, etc.?
3. **Is the tax calculation complete?** Just STCG or other taxes too?
4. **Data quality concerns?** Are historical prices accurate?
5. **Market impact?** Large positions might affect stock prices
6. **Liquidity constraints?** Can we actually execute such large trades?

## üí° ALTERNATIVE VERIFICATION METHODS

### **Method 1: Conservative Recalculation**
Try with position size cap (e.g., max ‚Çπ1 lakh per trade) to see more realistic returns.

### **Method 2: Sample Period Testing**
Test strategy on just 2020-2021 data to verify logic on smaller dataset.

### **Method 3: Manual Spreadsheet**
Create Excel/Google Sheets with same logic for 10-20 trades to cross-verify calculations.

### **Method 4: Code Review Checklist**
- [ ] RSI calculation matches standard formula
- [ ] Tax applied only to profits, not gross proceeds  
- [ ] Position sizing uses whole shares only
- [ ] Entry/exit conditions correctly implemented
- [ ] Date handling and data alignment correct
- [ ] Monthly reporting calculations accurate

## üîÑ ITERATIVE IMPROVEMENT PROCESS

1. **Phase 1**: Team reviews code and identifies potential issues
2. **Phase 2**: Manual verification of key calculations
3. **Phase 3**: Implement any necessary corrections
4. **Phase 4**: Re-run with validated parameters
5. **Phase 5**: Final team sign-off on results

## üìû TEAM COORDINATION

**Next Steps:**
1. Each team member should run the script independently
2. Compare results across different environments
3. Schedule team meeting to discuss findings
4. Document any discrepancies or concerns
5. Agree on final validation before proceeding

**Timeline Suggestion:**
- Day 1-2: Individual code review and execution
- Day 3: Team discussion and issue identification  
- Day 4-5: Address any concerns and re-test
- Day 6: Final validation and documentation